
% Custom step function to calculate array factor, gain, and reward
 function [NextObs, reward, IsDone, Info] = myStep(Action, LoggedInfo)

    step = LoggedInfo.StepCount + 1;
    MaxSteps = 50;

    %% --- CONSTANTS ---
    N = 5;                      % Number of array elements
    lambda = 328;               % Wavelength (mm)
    d = 175;                    % Element spacing (mm)
    k = 2 * pi / lambda;        % Wavenumber
    phi = linspace(0, 2*pi, 360);  % Angular sweep
    Pt = 20;                    % Transmit power
    element = [-9.27900000000000	-8.97600000000000	-8.67800000000000	-8.38400000000000	-8.09400000000000	-7.80800000000000	-7.52500000000000	-7.24600000000000	-6.97100000000000	-6.69800000000000	-6.42900000000000	-6.16200000000000	-5.89700000000000	-5.63600000000000	-5.37600000000000	-5.11900000000000	-4.86400000000000	-4.61100000000000	-4.36000000000000	-4.11100000000000	-3.86300000000000	-3.61800000000000	-3.37400000000000	-3.13100000000000	-2.89100000000000	-2.65200000000000	-2.41500000000000	-2.17900000000000	-1.94500000000000	-1.71300000000000	-1.48200000000000	-1.25400000000000	-1.02600000000000	-0.801200000000000	-0.577800000000000	-0.356200000000000	-0.136700000000000	0.0807800000000000	0.296200000000000	0.509400000000000	0.720300000000000	0.928900000000000	1.13500000000000	1.33900000000000	1.54000000000000	1.73800000000000	1.93400000000000	2.12700000000000	2.31600000000000	2.50300000000000	2.68700000000000	2.86700000000000	3.04400000000000	3.21800000000000	3.38800000000000	3.55500000000000	3.71800000000000	3.87700000000000	4.03300000000000	4.18400000000000	4.33100000000000	4.47500000000000	4.61400000000000	4.74900000000000	4.88000000000000	5.00600000000000	5.12800000000000	5.24600000000000	5.35900000000000	5.46700000000000	5.57100000000000	5.67000000000000	5.76400000000000	5.85300000000000	5.93700000000000	6.01700000000000	6.09200000000000	6.16100000000000	6.22600000000000	6.28500000000000	6.34000000000000	6.38900000000000	6.43300000000000	6.47200000000000	6.50600000000000	6.53500000000000	6.55800000000000	6.57600000000000	6.58900000000000	6.59700000000000	6.59900000000000	6.59600000000000	6.58800000000000	6.57500000000000	6.55600000000000	6.53200000000000	6.50300000000000	6.46900000000000	6.43000000000000	6.38500000000000	6.33500000000000	6.28100000000000	6.22100000000000	6.15600000000000	6.08600000000000	6.01100000000000	5.93200000000000	5.84700000000000	5.75800000000000	5.66400000000000	5.56500000000000	5.46100000000000	5.35300000000000	5.24100000000000	5.12300000000000	5.00200000000000	4.87600000000000	4.74600000000000	4.61100000000000	4.47200000000000	4.33000000000000	4.18300000000000	4.03200000000000	3.87800000000000	3.71900000000000	3.55700000000000	3.39100000000000	3.22200000000000	3.04900000000000	2.87300000000000	2.69300000000000	2.51000000000000	2.32400000000000	2.13500000000000	1.94200000000000	1.74700000000000	1.54900000000000	1.34800000000000	1.14400000000000	0.937800000000000	0.728800000000000	0.517300000000000	0.303200000000000	0.0867600000000000	-0.132100000000000	-0.353200000000000	-0.576600000000000	-0.802200000000000	-1.03000000000000	-1.26000000000000	-1.49200000000000	-1.72600000000000	-1.96200000000000	-2.20000000000000	-2.44000000000000	-2.68300000000000	-2.92700000000000	-3.17300000000000	-3.42100000000000	-3.67100000000000	-3.92400000000000	-4.17800000000000	-4.43500000000000	-4.69400000000000	-4.95500000000000	-5.21800000000000	-5.48400000000000	-5.75300000000000	-6.02400000000000	-6.29800000000000	-6.57400000000000	-6.85400000000000	-7.13700000000000	-7.42300000000000	-7.71200000000000	-8.00500000000000	-8.30200000000000	-8.60300000000000	-8.90900000000000	-9.21800000000000	-9.53200000000000	-9.85200000000000	-10.1800000000000	-10.5100000000000	-10.8400000000000	-11.1800000000000	-11.5300000000000	-11.8800000000000	-12.2400000000000	-12.6100000000000	-12.9900000000000	-13.3700000000000	-13.7600000000000	-14.1500000000000	-14.5600000000000	-14.9700000000000	-15.3900000000000	-15.8100000000000	-16.2400000000000	-16.6800000000000	-17.1200000000000	-17.5600000000000	-18	-18.4400000000000	-18.8700000000000	-19.2900000000000	-19.6900000000000	-20.0700000000000	-20.4300000000000	-20.7600000000000	-21.0500000000000	-21.3000000000000	-21.5100000000000	-21.6700000000000	-21.7900000000000	-21.8600000000000	-21.8900000000000	-21.8900000000000	-21.8600000000000	-21.8000000000000	-21.7300000000000	-21.6400000000000	-21.5500000000000	-21.4500000000000	-21.3500000000000	-21.2600000000000	-21.1700000000000	-21.0900000000000	-21.0200000000000	-20.9500000000000	-20.9000000000000	-20.8600000000000	-20.8300000000000	-20.8200000000000	-20.8100000000000	-20.8000000000000	-20.8100000000000	-20.8200000000000	-20.8300000000000	-20.8500000000000	-20.8600000000000	-20.8700000000000	-20.8700000000000	-20.8600000000000	-20.8400000000000	-20.8100000000000	-20.7700000000000	-20.7000000000000	-20.6300000000000	-20.5300000000000	-20.4200000000000	-20.2900000000000	-20.1500000000000	-20	-19.8300000000000	-19.6700000000000	-19.4900000000000	-19.3200000000000	-19.1500000000000	-18.9700000000000	-18.8100000000000	-18.6500000000000	-18.5000000000000	-18.3600000000000	-18.2300000000000	-18.1100000000000	-18.0100000000000	-17.9200000000000	-17.8400000000000	-17.7800000000000	-17.7300000000000	-17.7000000000000	-17.6800000000000	-17.6800000000000	-17.6900000000000	-17.7200000000000	-17.7600000000000	-17.8100000000000	-17.8700000000000	-17.9500000000000	-18.0400000000000	-18.1400000000000	-18.2400000000000	-18.3600000000000	-18.4800000000000	-18.6000000000000	-18.7300000000000	-18.8500000000000	-18.9800000000000	-19.1100000000000	-19.2300000000000	-19.3400000000000	-19.4500000000000	-19.5500000000000	-19.6400000000000	-19.7300000000000	-19.8000000000000	-19.8700000000000	-19.9300000000000	-19.9800000000000	-20.0300000000000	-20.0700000000000	-20.1100000000000	-20.1400000000000	-20.1800000000000	-20.2200000000000	-20.2600000000000	-20.3100000000000	-20.3600000000000	-20.4200000000000	-20.4900000000000	-20.5600000000000	-20.6400000000000	-20.7300000000000	-20.8300000000000	-20.9300000000000	-21.0300000000000	-21.1300000000000	-21.2300000000000	-21.3300000000000	-21.4200000000000	-21.4900000000000	-21.5300000000000	-21.5600000000000	-21.5500000000000	-21.5000000000000	-21.4100000000000	-21.2800000000000	-21.1000000000000	-20.8800000000000	-20.6200000000000	-20.3100000000000	-19.9800000000000	-19.6100000000000	-19.2200000000000	-18.8200000000000	-18.4000000000000	-17.9700000000000	-17.5300000000000	-17.1000000000000	-16.6600000000000	-16.2300000000000	-15.8000000000000	-15.3800000000000	-14.9600000000000	-14.5500000000000	-14.1500000000000	-13.7600000000000	-13.3700000000000	-12.9900000000000	-12.6200000000000	-12.2600000000000	-11.9000000000000	-11.5500000000000	-11.2100000000000	-10.8700000000000	-10.5400000000000	-10.2200000000000	-9.90000000000000	-9.58700000000000];

    %% --- UNPACK ACTION ---
    amplitude = Action(1:N);           % First 5 values = amplitudes
    phase = Action(N+1:end);           % Next 5 values = phases

    %% --- CALCULATE ARRAY FACTOR ---
    AF = zeros(size(phi)); %realloacte
% Loop over each discrete phi step and calculate AF
for idx = 1:length(phi)
    % Compute the array factor at each angle phi
    af_sum = 0;
    for n = 1:N
        % Apply amplitude and phase for each element
        af_sum = af_sum + (amplitude(n) * exp(1j*(n-1)*phase(n)))...
            * (exp(1j * (n-1) * k * d * cos(phi(idx))));
    end
    AF(idx) = abs(af_sum);  % Store the magnitude of the array factor
end

    % dB + element pattern
    AF_dB = 10 * log10(AF + eps);
    current_pattern = element + AF_dB;

    %% GET NODE INFORMATION
    nodes = LoggedInfo.NodePositions;     % 5x2 [R, Ï†]
    node1 = nodes(1, :);
    node2 = nodes(2, :);
    node3 = nodes(3, :);
    node4 = nodes(4, :);
    node5 = nodes(5, :);

    loss1 = generateLoss();
    loss2 = generateLoss();

    %We arbitraily say node 1 is always target
    rssi1 = pathLoss(node1, current_pattern) + isCollision(node1, loss1) + isCollision(node1, loss2)+Pt;
    %Rssi for other nodes
    rssi2 = pathLoss(node2, current_pattern) + isCollision(node2, loss1) + isCollision(node2, loss2) + Pt;
    rssi3 = pathLoss(node3, current_pattern) + isCollision(node3, loss1) + isCollision(node3, loss2) + Pt;
    rssi4 = pathLoss(node4, current_pattern) + isCollision(node4, loss1) + isCollision(node4, loss2) + Pt;
    rssi5 = pathLoss(node5, current_pattern) + isCollision(node5, loss1) + isCollision(node5, loss2) + Pt;


    %% --- REWARD FUNCTION EXAMPLE ---
    % Maximize gain to node1, minimize gain to others
    reward1 = rssi1
    penalty = 0.001 * ( (rssi2 - rssi1 +10)^2 + (rssi3 - rssi1 +10)^2 ...
        + (rssi4 - rssi1 +10)^2 + (rssi5 - rssi1 +10)^2 );
    reward=reward1 - penalty;

    %% --- UPDATE OBSERVATION ---
    % Keep same node positions as observation
    NextObs = [nodes(:,1); nodes(:,2)];  

    %% --- RETURN INFO (optional logging) ---
    Info.Rssi = [rssi1, rssi2, rssi3, rssi4, rssi5];  % Return the RSSI values as gains
    Info.Reward = reward;
    Info.AF = AF;
    Info.StepCount = step;
    Info.NodePositions=nodes;
    %% --- TERMINATION LOGIC ---
    LoggedInfo.StepCount = step;
    
    IsDone = step >= MaxSteps;

end